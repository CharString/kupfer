<page xmlns="http://projectmallard.org/1.0/"
      type="topic"
      id="plugins">

  <info>
   <link type="guide" xref="index#usage"/>
   <desc>Using <app>Kupfer</app> plugins.</desc>
  </info>

  <title>Plugins</title>

  <p>
    You can install custom plugins into ~/.local/share/kupfer/plugins; 
    adding to <app>Kupfer</app>'s object knowledge can be surprisingly 
    easy, just look at the default plugins if you want to create new.
  </p>

 <section>
  <title>Search the Web Search Engines</title>
  <p>
   The Search the Web plugin uses <app>Firefox'</app> search engines, 
   so you can add Search Engines directly in <app>Firefox</app> and 
   <app>Kupfer</app> will find them later.
  </p>
  <p>
   You can also install custom search plugins directly, only for 
   <app>Kupfer</app>, in the folder:
  </p>
   <code>~/.local/share/kupfer/searchplugins/</code>

 </section>
  
 <section>
  <title>Open Terminal Here</title>
  <p>
   Open terminal first calls <cmd>xdg-terminal</cmd>, then <cmd>gnome-terminal</cmd>. 
   xdg-terminal is a script to find the user's configured terminal program for 
   his/her Desktop Environment. Install <cmd>xdg-terminal</cmd> if you need this 
   (or install a symlink <em>called</em> xdg-terminal). 
  </p>
 </section>
  
 <section>
  <title>Grab current selection</title>
  <p>
   To use <app>Kupfer</app> like a pro, you can configure a "Magic Keybinding" 
   for <app>Kupfer</app>. GUI configuration is not yet supported, but edit the 
   configuration file <file>~/.config/kupfer/kupfer.cfg</file> to include the 
   following:
  </p>
  <code>
[Kupfer]
keybinding = &lt;Control&gt;space
magickeybinding = &lt;Ctrl&gt;&lt;Alt&gt;space
  </code>
  
  <p>
   Now, pressing <keyseq><key>Ctrl</key><key>Alt</key><key>Space</key></keyseq> 
   will summon <app>Kupfer</app> with the current selection in focus. Make sure 
   you have installed <app>Kupfer</app>'s nautilus plugin, then both the currently 
   selected file in Nautilus, or the currently selected text in the front application 
   will be selected.
  </p>
  <p>
   Now you can select a word in, say, a web browser, use 
   <keyseq><key>Ctrl</key><key>Alt</key><key>Space</key></keyseq>, and select action 
   <gui>Look Up</gui> to look up the selected word. Or select an image file, use 
   <keyseq><key>Ctrl</key><key>Alt</key><key>Space</key></keyseq>, select action 
   <gui>Scale</gui> with object <gui>1000</gui> to scale the image to 1000 pixels wide!
  </p>
 </section>
  
 <section>
  <title>Adding your actions and scripts</title>
  <p>
   If you want to add a custom application, or an application called with 
   special options, you can create a new launcher for it and place it in 
   one of the standard places for applications, for example 
   <file>~/.local/share/applications</file>, where <app>Kupfer</app> will find it. 
  </p>
  <p>
   If you have a collection of scripts that you want to call from <app>Kupfer</app>, 
   you can add the scripts folder as a catalog directory to <app>Kupfer</app> in the 
   preferences. Scripts that you add to <app>Kupfer</app>'s catalog this way can be 
   run directly or in the terminal as long as they are executable.
  </p>
  <p>
   An example useful script is <link href="http://kaizer.se/wiki/code/rhrating.py/">
   here</link> which changes the rating of <app>Rhythmbox</app>'s currently playing 
   song; I have added five scriptlets calling <file>rhrating.py</file> with numbers 
   from 0 to 5 to my catalog to quickly rate tracks. (This is something that might 
   be integrated into <app>Kupfer</app> later)
  </p>
 </section>
  
 <section>
  <title>Calculator Plugin</title>
  <p>
    The calculator plugin lets you calculate expressions quickly. It can evaluate 
    expressions entered as text starting with "=". Entering = from command mode will 
    start text mode directly with = prefixed for quick access.
  </p>
  <p>
    The Calculator uses python's math and complex math modules, 
    and parses expressions as Python expressions. You may use common 
    mathematical functions, such as sqrt, sin, exp and log; the command 
    <cmd>=help</cmd> will show a list of all defined functions and constants. 
  </p>
  <list>
   <item>
    <p>
     Notice that the power operator in Python is double stars, for example 
     =3**3 will evaluate to 27.
    </p>
   </item>
   <item>
    <p>
     To calculate trig functions for angles, convert to radians first: 
    </p>
    <code>sin(radians(30)) -> 0.5</code>
   </item>
   <item>
    <p>
     The last result is stored as the name _ (an underscore, just like in 
     the Python console).
    </p>
   </item>
  </list>

 </section>
  
 <section>
  <title>Command line connection</title>
  <p>
    <app>Kupfer</app> is its own remote control. When <app>Kupfer</app> is 
    already running, <app>Kupfer</app> on the command-line will focus its window, 
    but there is more you can do: If you invoke <cmd><app>kupfer</app> 
    <var>QUERY</var></cmd> where <var>QUERY</var> is a text string or a filename, 
    <app>Kupfer</app> will focus, and select this item. This way, you can quickly 
    invoke <app>Kupfer</app> actions even on objects from a shell-based context.
  </p>
  <p>
    For example, if you are using the shell in a directory where you have 
    a file called "report.pdf", you can focus this file in <app>Kupfer</app> by 
    running <cmd>kupfer report.pdf</cmd>. 
  </p>
  <p>
    You can also pipe the output of a command into <app>Kupfer</app> to send text to 
    the already running instance of <app>Kupfer</app>. 
  </p>
 </section>
  
 <section>
  <title>Managing Context and Current Selection</title>
  <p>
    If you find the object you want to use, then invoke an action, 
    <app>Kupfer</app> goes away to perform the action (for example start a program 
    or play a song). When you come back to <app>Kupfer</app>, it will still keep the 
    same object and action selected. Some actions make sense to be 
    repeated (like skipping to the next song) and it can be useful to 
    perform different actions on the same object.
  </p>
  <p>
    However, you always have the top level catalog reachable when you 
    "come back" to <app>Kupfer</app> -- say you went into the subcatalog "Albums" 
    to browse your albums only; you select and album to play, and play it. 
    You come back with the album selected -- but your next search will still 
    go over the top level catalog, not just albums.
  </p>
  <p>
    How to come back into the subcatalog you were in? You do that by simply 
    browsing, not searching the first thing you do when you focus <app>Kupfer</app> again. 
    A quick way is to press down-arrow or space to open the browse window; 
    think of it as saying "I want to stay in this subfolder". With the browse 
    window open, your next query will search the current subcatalog. 
  </p>
  <p>
    This way you can work both ways -- you can quickly drill down into folders 
    to find a file, and when you come back for the next action with <app>Kupfer</app> you 
    can either summon any normal toplevel object (just start typing), or stay 
    around where you were, deep in that folder (press space, then type a query).
  </p>
 </section>
  
</page>
